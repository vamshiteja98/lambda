name: Deploy Lambdas to AWS

on:
  push:
    branches:
      - main  # Replace with your target branch
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Install AWS CLI v2
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Deploy Lambdas
        run: |
          #!/bin/bash

          # Define your base path for Lambda folders and AWS details
          BASE_PATH="./"          # Adjust based on your base path for Lambda folders
          AWS_REGION="ap-south-1" # Your AWS region
          ROLE_ARN="arn:aws:iam::***:role/Lambdarole" # Your actual role ARN

          # Loop through each top-level directory
          for dir in "$BASE_PATH"*/; do

              if [ -f "$dir/index.js" ]; then  # Check if index.js exists in the folder
                  FUNCTION_NAME=$(basename "$dir")  # Get the name of the directory as function name

                  # Create a zip file containing all files and directories
                  echo "Creating zip file for $FUNCTION_NAME..."
                  
                  cd "$dir" || { echo "Failed to change directory to $dir"; exit 1; }

                  # Zip all files and folders in the directory
                  zip -r "../$FUNCTION_NAME.zip" .

                  echo "Contents of the zip file:"
                  unzip -l "../$FUNCTION_NAME.zip"    # List the contents of the created zip file

                  cd .. || { echo "Failed to change back to base directory"; exit 1; }

                  # Check if the Lambda function already exists
                  if aws lambda get-function --function-name "$FUNCTION_NAME" --region "$AWS_REGION" >/dev/null 2>&1; then
                      echo "Updating existing Lambda function $FUNCTION_NAME..."

                      # Update the existing Lambda function code
                      aws lambda update-function-code --function-name "$FUNCTION_NAME" \
                          --zip-file fileb://"$FUNCTION_NAME.zip" --region "$AWS_REGION"

                      # Wait for a few seconds to ensure the code update completes
                      echo "Waiting for the Lambda update to complete..."
                      sleep 30

                      # Prepare the environment variables JSON if environmentvariables.txt exists
                      ENV_FILE="$dir/environmentvariables.txt"
                      if [ -f "$ENV_FILE" ]; then
                          echo "Reading environment variables from $ENV_FILE..."
                          ENVIRONMENT_JSON=$(awk -F= '{print "\""$1"\":\""$2"\""}' "$ENV_FILE" | paste -sd, -)
                          ENVIRONMENT_JSON="{\"Variables\":{$ENVIRONMENT_JSON}}"

                          # Update the Lambda function configuration with environment variables
                          aws lambda update-function-configuration --function-name "$FUNCTION_NAME" \
                              --memory-size 1024 \
                              --timeout 840 \
                              --ephemeral-storage '{"Size": 512}' \
                              --environment "$ENVIRONMENT_JSON" \
                              --region "$AWS_REGION"
                      fi

                  else
                      echo "Creating new Lambda function $FUNCTION_NAME..."

                      # Create the new Lambda function
                      aws lambda create-function --function-name "$FUNCTION_NAME" \
                          --runtime "nodejs18.x" \
                          --role "$ROLE_ARN" \
                          --handler "index.handler" \
                          --zip-file fileb://"$FUNCTION_NAME.zip" \
                          --memory-size 1024 \
                          --timeout 840 \
                          --ephemeral-storage '{"Size": 512}' \
                          --region "$AWS_REGION"
                      
                      # If environmentvariables.txt exists, set the environment variables
                      ENV_FILE="$dir/environmentvariables.txt"
                      if [ -f "$ENV_FILE" ]; then
                          echo "Reading environment variables from $ENV_FILE..."
                          ENVIRONMENT_JSON=$(awk -F= '{print "\""$1"\":\""$2"\""}' "$ENV_FILE" | paste -sd, -)
                          ENVIRONMENT_JSON="{\"Variables\":{$ENVIRONMENT_JSON}}"

                          # Update the Lambda function configuration with environment variables
                          aws lambda update-function-configuration --function-name "$FUNCTION_NAME" \
                              --environment "$ENVIRONMENT_JSON" \
                              --region "$AWS_REGION"
                      fi

                  fi

                  # Clean up zip file after deployment
                  rm "$FUNCTION_NAME.zip"

              fi

          done

